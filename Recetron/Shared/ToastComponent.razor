@using Recetron.Enums;
@using Recetron.Interfaces;
@using Recetron.Models;

@inject IToastService ToastService

@implements IDisposable

<div class="toast-container">
  @foreach (var item in queue)
  {
    if (item.IsShowing)
    {
      <div class="toast-item toast @item.KindToString()">
        <button class="btn btn-clear float-right" @onclick="@(_ => { item.IsShowing = false; StateHasChanged(); })"></button>
        <h4>@item.Title</h4>
        @if (item.IsHtml)
        {
          @((MarkupString)item.Content)
        }
        else
        {
          <p>@item.Content</p>
        }
      </div>
    }
  }
</div>


@code {
  private Queue<ToastContent> queue = new Queue<ToastContent>();
  private System.Threading.CancellationTokenSource _cts = new System.Threading.CancellationTokenSource();


  protected override void OnInitialized()
  {
    ToastService.OnShowToast += EnqueueToast;
    ToastService.ClearAllToasts += ClearToasts;
  }

  private void EnqueueToast(object sender, ToastContent content)
  {
    queue.Enqueue(content);
    StateHasChanged();
    try
    {
      Task.Run(async () =>
      {
        try
        {
          await Task.Delay(content.Duration, _cts.Token);
          queue.Dequeue();
          StateHasChanged();
        }
        catch (TaskCanceledException e)
        {
          Console.Error.WriteLine($"Task Has been Cancelled: {e.Message} - {e.StackTrace}");
        }
        catch (InvalidOperationException e)
        {
          Console.Error.WriteLine($"Failed to Dequeue, queue may be already empty?: {e.Message} - {e.StackTrace}");
        }
      }, _cts.Token);
    }
    catch (TaskCanceledException e)
    {
      Console.Error.WriteLine($"Task Has been Cancelled: {e.Message} - {e.StackTrace}");
    }
  }

  private void ClearToasts(object sender, object args)
  {
    _cts.Cancel();
    queue.Clear();
  }

  public void Dispose()
  {
    ToastService.OnShowToast -= EnqueueToast;
    ToastService.ClearAllToasts -= ClearToasts;
    queue.Clear();
    try
    {
      _cts.Cancel();
      _cts.Dispose();
    }
    catch (ObjectDisposedException e)
    {
      Console.Error.WriteLine($"The token source may be disposed already: {e.Message} - {e.StackTrace}");
    }
    catch (AggregateException e)
    {
      Console.Error.WriteLine($"Failed to Cancel: {e.Message} - {e.StackTrace}");
    }
  }

}