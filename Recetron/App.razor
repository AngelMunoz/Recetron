@using Recetron.Interfaces
@using Recetron.Core.Models

@inject IAuthService _auth
@inject NavigationManager _nav
@inject Blazored.LocalStorage.ISyncLocalStorageService _localStorage
@inject IHttpClientFactory _httpFactory
@inject IJSRuntime _js

@implements IDisposable

<Router AppAssembly="@typeof(App).Assembly">
  <Found Context="routeData">
    <CascadingValue Value="picture">
      <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </CascadingValue>
  </Found>
  <NotFound>
    <LayoutView Layout="@typeof(MainLayout)">
      <p>Sorry, there's nothing at this address.</p>
    </LayoutView>
  </NotFound>
</Router>


@code {

  private UnsplashPicture? picture;



  protected override void OnInitialized()

  {

    _auth.AuthStateChanged += OnAuthStateChanged;

    if (_auth.IsAuthenticated)

    {

      _nav.NavigateTo(Constants.RECIPES_URL);

      return;

    }

    else

    {

      _nav.NavigateTo(Constants.AUTH_URL);

    }

  }



  protected override async Task OnInitializedAsync()

  {

    var record = _localStorage.GetItem<UnsplashPicture>(Constants.UNSPLASH_PICTURE_KEY_NAME);

    await SetBGUrl(record, true);

    using var http = _httpFactory.CreateClient(Constants.BG_PICTURE_URL_NAME);

    var picture = await http.GetFromJsonAsync<UnsplashPicture>(http.BaseAddress);

    _localStorage.SetItem<UnsplashPicture>(Constants.UNSPLASH_PICTURE_KEY_NAME, picture!);

    await SetBGUrl(picture);

    this.picture = picture;

  }



  private void OnAuthStateChanged(object? sender, bool isAuthenticated)

  {

    if (isAuthenticated)

    {

      _nav.NavigateTo(Constants.RECIPES_URL, true);

      return;

    }

    else

    {

      _nav.NavigateTo(Constants.AUTH_URL);

    }

  }



  private async Task SetBGUrl(UnsplashPicture? picture, bool setNow = false)

  {

    if (picture == null) { return; }

    var pictureUrl = picture?.Urls?.Regular?.ToString();

    if (setNow && !string.IsNullOrEmpty(pictureUrl))

    {



      await _js.InvokeVoidAsync("document.documentElement.style.setProperty", new string[] { "--main-background-image",
        $"url('{pictureUrl}')" });

      return;

    }

    _ = Task.Run(async () =>
    {

      await Task.Delay(TimeSpan.FromMinutes(3));

      await _js.InvokeVoidAsync("document.documentElement.style.setProperty", new string[] { "--main-background-image",
        $"url('{pictureUrl}')" });

    });

  }





  public void Dispose()

  {

    _auth.AuthStateChanged -= OnAuthStateChanged;

  }
}