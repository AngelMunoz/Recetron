@page "/recipes/{RecipeId}"
@using Recetron.Core.Models
@using System.Threading
@using Recetron.Core.Interfaces

@implements IDisposable

@inject IRecipeService RecipeService
@inject NavigationManager NavService

<article class="rec-page recipe-detail recbg-light">
  <nav class="navbar recbg-light">
    <section class="navbar-section">
      <a class="btn btn-link">@recipe?.Title</a>
    </section>
    <section class="navbar-section">
      <a class="btn btn-link" @onclick="@(_ => IsEditing = !IsEditing)">
        @if (IsEditing)
        {
          <Cancel />
        }
        else
        {
          <Pencil />
        }
      </a>
      <a class="btn btn-link" @onclick="@(_ => IsDeleting = true)">
        <Trash />
      </a>
    </section>
  </nav>
  @if (IsDeleting)
  {
    <div class="panel recbg-info delete-propmpt-panel">
      <div class="panel-header">
        <div class="panel-title">Delete &quot;@recipe?.Title&quot;</div>
      </div>
      <div class="panel-body">
        <p>
          Are you sure you want to delete this recipe? <br />
          all of it's contents will be lost
        </p>
      </div>
      <div class="panel-footer">
        <button class="btn" @onclick="@(_ => DeleteRecipe())">Yes, Delete</button>
        <button class="btn btn-primary" @onclick="@(_ => IsDeleting = false)">No, Cancel</button>
      </div>
    </div>
  }

  @if (IsEditing && recipe != null)
  {
    <RecipeForm Recipe="recipe" OnSaveRecipe="SaveRecipe" />
  }
  else
  {
    <RecipeView Recipe="recipe" />
  }
</article>
<style>
  .recipe-detail {
    display: flex;
    flex-direction: column;
  }
  .delete-propmpt-panel {
    align-self: center;
    margin: 0.5em;
  }
</style>

@code {
  [Parameter]
  public string? RecipeId { get; set; }

  private Recipe? recipe { get; set; }

  private bool IsEditing = false;
  private bool IsDeleting = false;

  private readonly CancellationTokenSource _cts = new CancellationTokenSource();

  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();
    recipe = await RecipeService.FindOne(RecipeId ?? "", _cts.Token);
  }

  private async void SaveRecipe(Recipe recipe)
  {
    var result = await RecipeService.Update(recipe, _cts.Token);
    if (!result)
    {
      Console.WriteLine($"Could not update the Recipe with id {recipe.Id}");
    }
  }

  private async void DeleteRecipe()
  {
    var success = await RecipeService.Destroy(recipe!.Id!);
    if (success)
    {
      NavService.NavigateTo("/recipes");
    }
    else
    {
      Console.WriteLine($"Could not Delete Recipe with id: {recipe?.Id}");
    }
  }

  public void Dispose()
  {
    _cts.Dispose();
  }

}
