@page "/recipes/{RecipeId}"
@using Recetron.Core.Models
@using System.Threading
@using Recetron.Core.Interfaces

@implements IDisposable

@inject Interfaces.IToastService _toastService
@inject IRecipeService _recipeService
@inject NavigationManager _navService

<article class="rec-page recipe-detail recbg-light">
  <nav class="navbar recbg-light">
    <section class="navbar-section">
      <a class="btn btn-link">@Recipe?.Title</a>
    </section>
    <section class="navbar-section">
      <a class="btn btn-link" @onclick="@(_ => _isEditing = !_isEditing)">
        @if (_isEditing)
        {
          <Cancel />
        }
        else
        {
          <Pencil />
        }
      </a>
      <a class="btn btn-link" @onclick="@(_ => _isDeleting = true)">
        <Trash />
      </a>
    </section>
  </nav>
  @if (_isDeleting)
  {
    <div class="panel recbg-info delete-propmpt-panel">
      <div class="panel-header">
        <div class="panel-title">Delete &quot;@Recipe?.Title&quot;</div>
      </div>
      <div class="panel-body">
        <p>
          Are you sure you want to delete this recipe? <br />
          all of it's contents will be lost
        </p>
      </div>
      <div class="panel-footer">
        <button class="btn" @onclick="@(_ => DeleteRecipe())">Yes, Delete</button>
        <button class="btn btn-primary" @onclick="@(_ => _isDeleting = false)">No, Cancel</button>
      </div>
    </div>
  }

  @if (_isEditing && Recipe != null)
  {
    <RecipeForm Recipe="Recipe" OnSaveRecipe="SaveRecipe" />
  }
  else
  {
    <RecipeView Recipe="Recipe" />
  }
</article>
<style>
  .recipe-detail {
    display: flex;
    flex-direction: column;
  }

  .delete-propmpt-panel {
    align-self: center;
    margin: 0.5em;
  }
</style>

@code {
  [Parameter]
  public string? RecipeId { get; set; }

  private Recipe? Recipe { get; set; }

  private bool _isEditing = false;
  private bool _isDeleting = false;

  private readonly CancellationTokenSource _cts = new CancellationTokenSource();

  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();
    try
    {
      Recipe = await _recipeService.FindOne(RecipeId ?? "", _cts.Token);
    }
    catch (Exception e)
    {
      Console.Error.WriteLine($"We could not get the Recipe with id: {RecipeId}: {e.Message} - {e.StackTrace}");
      var msg = $"There was a problem trying to get your recipe, please refresh the page";
      _toastService.ShowError("Failed to retrieve the recipe", msg, 6000);
    }
  }

  private async void SaveRecipe(Recipe? recipe)
  {
    if (recipe is null) return;
    try
    {
      var result = await _recipeService.Update(recipe, _cts.Token);
      if (!result)
      {
        var msg = $"While we could reach the server, check that you have filled all the fields in your ingredients and steps.";
        _toastService.ShowWarning("Failed to update the recipe", msg, 6000);
        _toastService.ShowWarning("Notice", "Saving without modifying also triggers this warning");
        return;
      }
      _toastService.ShowSuccess("Success", "Information saved successfuly", 6000);
    }
    catch (Exception e)
    {
      Console.Error.WriteLine($"We could not update the Recipe with id: {RecipeId}: {e.Message} - {e.StackTrace}");
      var msg = $"There was a problem trying to update your recipe, please refresh the page and try again";
      _toastService.ShowError("Failed to update the recipe", msg, 6000);
    }
  }

  private async void DeleteRecipe()
  {
    try
    {
      var success = await _recipeService.Destroy(Recipe!.Id!, _cts.Token);
      if (success)
      {
        _navService.NavigateTo("/recipes");
      }
      else
      {
        var msg = $"While we could reach the server, we were unable to delete the recipe, please reload the page and try again.";
        _toastService.ShowWarning("Failed to delete the recipe", msg, 6000);
      }
    }
    catch (Exception e)
    {
      Console.Error.WriteLine($"We could not delete the Recipe with id: {RecipeId}: {e.Message} - {e.StackTrace}");
      var msg = $"There was a problem trying to delete your recipe, please refresh the page and try again";
      _toastService.ShowError("Failed to delete the recipe", msg, 6000);
    }
  }

  public void Dispose()
  {
    try
    {
      _cts.Cancel();
      _cts.Dispose();
    }
    catch (ObjectDisposedException e)
    {
      Console.Error.WriteLine($"The token source may be disposed already: {e.Message} - {e.StackTrace}");
    }
    catch (AggregateException e)
    {
      Console.Error.WriteLine($"Failed to Cancel: {e.Message} - {e.StackTrace}");
    }
  }

}