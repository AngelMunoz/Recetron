@page "/auth"

@using Recetron.Core.Models
@using Recetron.Interfaces

@inject IToastService _toastService
@inject IAuthService _authService
@inject NavigationManager _navigationManager




<section class="rec-page rec-auth recbg-light">
  <h1 class="text-center">Welcome</h1>
  <ul class="tab tab-block">
    <li class="tab-item @(@IsActive("login") ? "active" : "")">
      <a @onclick="@(_ => @SetActiveTab("login"))">Login</a>
    </li>
    <li class="tab-item @(@IsActive("signup") ? "active" : "")">
      <a @onclick="@(_ => @SetActiveTab("signup"))">Signup</a>
    </li>
  </ul>

  @if (@ActiveTab == "login")
  {
    <EditForm Model="@loginPayload" OnValidSubmit="SubmitLogin">
      <DataAnnotationsValidator />
      <ValidationSummary />
      <section class="form-group">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" class="form-input" type="email" @bind-Value="loginPayload.Email" placeholder="Email" />
      </section>
      <section class="form-group">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-input" @bind-Value="loginPayload.Password" placeholder="Password" />
      </section>
      <section class="form-group">
        <button class="btn">Send</button>
      </section>
    </EditForm>
  }
  else
  {
    <EditForm Model="@signUpPayload" OnValidSubmit="SubmitSignUp">
      <DataAnnotationsValidator />
      <ValidationSummary />
      @if (_passwordError != null)
      {
        <ul class="validation-errors">
          <li class="validation-message">Passwords do not match</li>
        </ul>
      }
      <section class="form-group">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-input" @bind-Value="signUpPayload.Name" placeholder="Name" />
      </section>
      <section class="form-group">
        <label for="LastName" class="form-label">Last Name</label>
        <InputText id="LastName" class="form-input" @bind-Value="signUpPayload.LastName" placeholder="Last Name" />
      </section>
      <section class="form-group">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" type="email" class="form-input" @bind-Value="signUpPayload.Email" placeholder="Email" />
      </section>
      <section class="form-group">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-input" @bind-Value="signUpPayload.Password" placeholder="Password" />
      </section>
      <section class="form-group">
        <label for="repeatPassword" class="form-label">Repeat Password</label>
        <InputText id="repeatPassword" type="password" name="repeatPassword" class="form-input" @bind-Value="@RepeatPassword" placeholder="Password" />
      </section>
      <section class="form-group">
        <button class="btn">Send</button>
      </section>
    </EditForm>
  }
</section>

@code {

  public string ActiveTab { get; private set; } = "signup";

  private string RepeatPassword { get; set; } = "";

  private LoginPayload loginPayload = new LoginPayload { Email = "", Password = "" };

  private SignUpPayload signUpPayload = new SignUpPayload { Email = "", Password = "", LastName = "", Name = "" };

  private string? _passwordError;

  private async void SubmitLogin()
  {
    try
    {
      var success = await _authService.LoginAsync(loginPayload);
      if (success)
      {
        _navigationManager.NavigateTo("/recipes", true);
      }
      else
      {
        var msg = $"We could not log you in please check your email and password";
        _toastService.ShowError("Unable to Log in", msg, 6000);
      }
    }
    catch (System.Exception e)
    {
      Console.Error.WriteLine($"Failed to Login: {e.Message} - {e.StackTrace}");
      var msg = $"We could not log you in please check your email and password";
      _toastService.ShowError("Unable to Log in", msg, 6000);
    }
  }

  private async void SubmitSignUp()
  {
    if (signUpPayload.Password != RepeatPassword)
    {
      Console.Error.WriteLine($"Passwords don't match");
      _passwordError = "Passwords don't match";
      return;
    }
    else
    {
      _passwordError = null;
    }
    try
    {
      var success = await _authService.SignupAsync(signUpPayload);
      if (success)
      {
        _navigationManager.NavigateTo("/recipes", true);
      }
      else
      {
        var msg = $"We could not sign you up in please check you provided all of the information, the server may be down";
        _toastService.ShowError("Unable to Sign up", msg, 6000);
      }
    }
    catch (System.Exception e)
    {
      Console.Error.WriteLine($"Failed to Login: {e.Message} - {e.StackTrace}");
      var msg = $"We could not sign you up in please check you provided all of the information, the server may be down";
      _toastService.ShowError("Unable to Sign up", msg, 6000);
    }
  }

  private void SetActiveTab(string name)
  {
    ActiveTab = name;
  }

  private bool IsActive(string name)
  {
    return ActiveTab == name;
  }

  protected override void OnInitialized()
  {
    if (_authService.IsAuthenticated)
    {
      _navigationManager.NavigateTo(Constants.RECIPES_URL);
      return;
    }
  }
}