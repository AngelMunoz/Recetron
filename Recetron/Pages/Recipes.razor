@page "/recipes"
@using Recetron.Core.Models
@using System.Threading
@using Recetron.Core.Interfaces

@implements IDisposable

@inject IRecipeService RecipeService
@inject NavigationManager NavigationManager


<article class="rec-page recipes">
  <ul class="tile-list">
    @foreach (var recipe in recipes.List)
      {
        <li class="tile tile-centered">
          <div class="tile-content">
            <p class="tile-title">@recipe.Title</p>
            <p class="tile-subtitle">@recipe.Description</p>
          </div>
          <div class="tile-action">
            <button class="btn btn-primary" @onclick="@(e => NavigateToRecipe(recipe.Id))">
              <CheffHat BackgroundColor="#fff"/>
            </button>
          </div>
        </li>
      }
  </ul>
</article>
<style>
  .rec-page.recipes
  .tile-list {
    display: flex;
    flex-direction: row;
    justify-content: space-around;
    flex-wrap: wrap;
    list-style: none;
    margin: 0;
    padding: 0;
  }
  .rec-page.recipes
  .tile-list .tile {
    height: 150px;
    width: 268px;
    padding: 1em;
  }
</style>

@code {
  private int Page { get; set; } = 1;
  private int Limit { get; set; } = 10;
  private readonly CancellationTokenSource _cts = new CancellationTokenSource();
  private PaginationResult<Recipe> recipes { get; set; } = new PaginationResult<Recipe>();

  protected override async Task OnInitializedAsync()
  {
    recipes = await RecipeService.Find(Page, Limit, _cts.Token);
  }
  
  private void NavigateToRecipe(string? recipeId)
  {
    NavigationManager.NavigateTo($"recipes/{recipeId ?? string.Empty}");
  }

  public void Dispose()
  {
    _cts.Cancel();
    _cts.Dispose();
  }

}
