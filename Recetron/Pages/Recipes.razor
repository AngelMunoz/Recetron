@page "/recipes"
@using Recetron.Core.Models
@using System.Threading
@using Recetron.Core.Interfaces

@implements IDisposable

@inject Recetron.Interfaces.IToastService ToastService
@inject IRecipeService RecipeService
@inject NavigationManager NavigationManager


<article class="rec-page recipes recbg-light">

  @if (recipes.Count == 0 && !ShowAddRecipe)
  {
    <div class="empty">
      <div class="empty-icon">
        <FoodVariantOff />
      </div>
      @if (!FailedToGet)
      {
        <p class="empty-title h5">There are no recipes here :)</p>
        <p class="empty-subtitle">Click to add an empty recipe</p>
        <div class="empty-action">
          <button class="btn btn-link" @onclick="@(_ => ShowAddRecipe = !ShowAddRecipe)"><Add /></button>
        </div>
      }
      else
      {
        <p class="empty-title h5">There was a problem retriving your recipes.</p>
        <p class="empty-subtitle">Please reload the page :(</p>
      }
    </div>
  }
  else if (!ShowAddRecipe)
  {
    <header class="navbar recbg-light">
      <section class="navbar-section">
        <a class="btn btn-link c-auto">
          Here&prime;s a list with your existing recipes
        </a>
      </section>
      <section class="navbar-center">
        <button class="btn btn-link" @onclick="@(_ => ShowAddRecipe = !ShowAddRecipe)"><Add /></button>
      </section>
    </header>
  }

  <section class="recipes-content">
    @if (ShowAddRecipe)
    {
      <div class="form">
        <button class="btn btn-link" @onclick="@(_ => ShowAddRecipe = !ShowAddRecipe)">Cancel</button>
        <RecipeForm Recipe="@NewRecipe" OnSaveRecipe="@SaveNewRecipe" />
      </div>
    }

    <div class="list">
      <ul class="tile-list">
        @foreach (var recipe in recipes.List)
        {
          <li class="tile tile-centered recbg-default">
            <div class="tile-content">
              <p class="tile-title">@recipe.Title</p>
              <p class="tile-subtitle">@recipe.Description</p>
            </div>
            <div class="tile-action">
              <button class="btn btn-primary" @onclick="@(e => NavigateToRecipe(recipe.Id))">
                <CheffHat BackgroundColor="#fff" />
              </button>
            </div>
          </li>
        }
      </ul>
    </div>
  </section>

</article>
<style>
  .rec-page.recipes .recipes-content {
    display: flex;
    flex-direction: row;
    justify-content: space-around;
  }

  @@media(max-width: 768px) {
    .rec-page.recipes .recipes-content {
      flex-direction: column;
    }
  }

  .rec-page.recipes .recipes-content .tile-list {
    display: flex;
    flex-direction: row;
    justify-content: space-around;
    flex-wrap: wrap;
    list-style: none;
    margin: 0;
    padding: 0;
  }

    .rec-page.recipes .recipes-content .tile-list .tile {
      width: 268px;
      padding: 0.5em;
      margin: 0.5em;
    }
</style>

@code {
  private int Page { get; set; } = 1;
  private int Limit { get; set; } = 10;
  private bool ShowAddRecipe { get; set; } = false;
  private readonly CancellationTokenSource _cts = new CancellationTokenSource();
  private PaginationResult<Recipe> recipes { get; set; } = new PaginationResult<Recipe>();
  private bool FailedToGet { get; set; } = false;

  private Recipe NewRecipe = new Recipe();

  protected override async Task OnInitializedAsync()
  {
    try
    {
      recipes = await RecipeService.Find(Page, Limit, _cts.Token);
    }
    catch (Exception e)
    {
      FailedToGet = true;
      Console.Error.WriteLine($"We could not retrieve the recipes: {e.Message} - {e.StackTrace}");
      var msg = $"There was a problem trying to retrieve your recipes, please refresh the page and try again";
      ToastService.ShowError("Failed to retrieve the recipes", msg, 6000);
    }
  }


  private async void SaveNewRecipe(Recipe? recipe)
  {
    if (recipe == null) return;
    try
    {
      await RecipeService.Create(recipe, _cts.Token);
      ToastService.ShowSuccess("Success", "Information saved successfuly", 6000);
    }
    catch (Exception e)
    {
      FailedToGet = true;
      Console.Error.WriteLine($"We could not save the recipe: {e.Message} - {e.StackTrace}");
      var msg = $"There was a problem trying to save your recipe, please refresh the page and try again";
      ToastService.ShowError("Failed to save the recipe", msg, 6000);
      return;
    }

    try
    {
      recipes = await RecipeService.Find(Page, Limit, _cts.Token);
      NewRecipe = new Recipe();
      ShowAddRecipe = false;
      StateHasChanged();
    }
    catch (Exception e)
    {
      FailedToGet = true;
      Console.Error.WriteLine($"We could not retrieve the recipes: {e.Message} - {e.StackTrace}");
      var msg = $"There was a problem trying to retrieve your recipes, please refresh the page and try again";
      ToastService.ShowError("Failed to retrieve the recipes", msg, 6000);
    }
  }

  private void NavigateToRecipe(string? recipeId)
  {
    NavigationManager.NavigateTo($"recipes/{recipeId ?? string.Empty}");
  }

  public void Dispose()
  {
    try
    {
      _cts.Cancel();
      _cts.Dispose();
    }
    catch (ObjectDisposedException e)
    {
      Console.Error.WriteLine($"The token source may be disposed already: {e.Message} - {e.StackTrace}");
    }
    catch (AggregateException e)
    {
      Console.Error.WriteLine($"Failed to Cancel: {e.Message} - {e.StackTrace}");
    }
  }

}
